import requests
import time
import pandas as pd

class fetchZenDesk:
    '''Class to retrieve customer success tickets from ZenDesk.
    ...
    Attributes
    __________
    username: str
        username used to access ZenDesk
    token: str
        access token generated by ZenDesk
    url: str
        company's ZenDesk tickets URL

    '''

    def __init__(self, username, token, url):
        self.username = username
        self.token = token
        self.url = url

    def __check_status_code(self, response):
        '''
        Checks the status code returned from the response object. 
        If a 429, then it sleeps. If not a 200, then return the status code.

        Parameters
        __________
        response: obj
            response object provided by the ZenDesk API connection
        '''

        if response.status_code == 429:
            print('Rate limited! Please wait.')
            time.sleep(int(response.headers['retry-after']))
        
        if response.status_code != 200:
            print(f'Error with status code {response.status_code}')
            exit()

    def __fetch_data(self, pages):
        '''
        Retrieves data from ZenDesk customer success tickets.

        Parameters
        __________
        pages: int
            number of ZenDesk customer success ticket pages to iterate over and return
        '''

        tickets = []
        val = 0
        url = self.url

        # make loop to be based on url or pages
        while val <= pages:
            response = requests.get(url, auth=(self.username, self.token))
            self.__check_status_code(response)

            data = response.json()
            tickets.extend(data['tickets'])
            url = data['next_page']
            val += 1

        #self.tickets = tickets
        return pd.DataFrame.from_dict(tickets)


    def get_messages_and_outcome(self, pages, ticket_type_id):
        '''
        Returns a dataframe containing the text of the ticket and the resulting data from the ticket_type_id column

        Parameters
        __________
        pages: int
            number of ZenDesk customer success ticket pages to iterate over and return
        
        ticket_type_id: int
            column id for the ticket type classification (disposition)

        Returns
        _______
        DataFrame
            a dataframe containing the ticket text and the category (disposition)
        '''

        data = self.__fetch_data(pages)

        issues = []
        ticket_text = []

        for i in range(len(data)):
            for row in data['custom_fields'][i]:
                if row['id'] == ticket_type_id:
                    if pd.notnull(row['value']):
                        issues.append(row['value'])
                        ticket_text.append(data['description'][i])

        df = pd.DataFrame({'issue':issues, 'ticket_text':ticket_text})

        return df
